// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hamidteimouri/go-shop/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetProducts provides a mock function with given fields: ctx, request
func (_m *ProductRepository) GetProducts(ctx context.Context, request *domain.ProductSearchRequest) (*domain.ProductResult, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.ProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProductSearchRequest) (*domain.ProductResult, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProductSearchRequest) *domain.ProductResult); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ProductSearchRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
